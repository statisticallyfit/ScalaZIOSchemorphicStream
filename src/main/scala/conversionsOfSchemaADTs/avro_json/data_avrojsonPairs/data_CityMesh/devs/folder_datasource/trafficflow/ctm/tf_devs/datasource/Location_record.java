/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package trafficflow.ctm.tf_devs.datasource;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Location_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4140871856209765765L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location_record\",\"namespace\":\"trafficflow.ctm.tf_devs.datasource\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sensorName\",\"type\":\"string\"},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"fields\":[{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"type\",\"type\":\"string\"}]}},{\"name\":\"symbol\",\"type\":[\"null\",\"string\"]}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Location_record> ENCODER =
            new BinaryMessageEncoder<Location_record>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Location_record> DECODER =
            new BinaryMessageDecoder<Location_record>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Location_record> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Location_record> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Location_record> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Location_record>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Location_record to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Location_record from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Location_record instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Location_record fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence sensorName;
    private trafficflow.ctm.tf_devs.datasource.Position position;
    private java.lang.CharSequence symbol;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Location_record() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param name The new value for name
     * @param sensorName The new value for sensorName
     * @param position The new value for position
     * @param symbol The new value for symbol
     */
    public Location_record(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence sensorName, trafficflow.ctm.tf_devs.datasource.Position position, java.lang.CharSequence symbol) {
        this.id = id;
        this.name = name;
        this.sensorName = sensorName;
        this.position = position;
        this.symbol = symbol;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return name;
            case 2:
                return sensorName;
            case 3:
                return position;
            case 4:
                return symbol;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.CharSequence) value$;
                break;
            case 1:
                name = (java.lang.CharSequence) value$;
                break;
            case 2:
                sensorName = (java.lang.CharSequence) value$;
                break;
            case 3:
                position = (trafficflow.ctm.tf_devs.datasource.Position) value$;
                break;
            case 4:
                symbol = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.lang.CharSequence getId() {
        return id;
    }


    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.CharSequence value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'name' field.
     * @return The value of the 'name' field.
     */
    public java.lang.CharSequence getName() {
        return name;
    }


    /**
     * Sets the value of the 'name' field.
     * @param value the value to set.
     */
    public void setName(java.lang.CharSequence value) {
        this.name = value;
    }

    /**
     * Gets the value of the 'sensorName' field.
     * @return The value of the 'sensorName' field.
     */
    public java.lang.CharSequence getSensorName() {
        return sensorName;
    }


    /**
     * Sets the value of the 'sensorName' field.
     * @param value the value to set.
     */
    public void setSensorName(java.lang.CharSequence value) {
        this.sensorName = value;
    }

    /**
     * Gets the value of the 'position' field.
     * @return The value of the 'position' field.
     */
    public trafficflow.ctm.tf_devs.datasource.Position getPosition() {
        return position;
    }


    /**
     * Sets the value of the 'position' field.
     * @param value the value to set.
     */
    public void setPosition(trafficflow.ctm.tf_devs.datasource.Position value) {
        this.position = value;
    }

    /**
     * Gets the value of the 'symbol' field.
     * @return The value of the 'symbol' field.
     */
    public java.lang.CharSequence getSymbol() {
        return symbol;
    }


    /**
     * Sets the value of the 'symbol' field.
     * @param value the value to set.
     */
    public void setSymbol(java.lang.CharSequence value) {
        this.symbol = value;
    }

    /**
     * Creates a new Location_record RecordBuilder.
     * @return A new Location_record RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Location_record.Builder newBuilder() {
        return new trafficflow.ctm.tf_devs.datasource.Location_record.Builder();
    }

    /**
     * Creates a new Location_record RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Location_record RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Location_record.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Location_record.Builder other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Location_record.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Location_record.Builder(other);
        }
    }

    /**
     * Creates a new Location_record RecordBuilder by copying an existing Location_record instance.
     * @param other The existing instance to copy.
     * @return A new Location_record RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Location_record.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Location_record other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Location_record.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Location_record.Builder(other);
        }
    }

    /**
     * RecordBuilder for Location_record instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location_record>
            implements org.apache.avro.data.RecordBuilder<Location_record> {

        private java.lang.CharSequence id;
        private java.lang.CharSequence name;
        private java.lang.CharSequence sensorName;
        private trafficflow.ctm.tf_devs.datasource.Position position;
        private trafficflow.ctm.tf_devs.datasource.Position.Builder positionBuilder;
        private java.lang.CharSequence symbol;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Location_record.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.sensorName)) {
                this.sensorName = data().deepCopy(fields()[2].schema(), other.sensorName);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.position)) {
                this.position = data().deepCopy(fields()[3].schema(), other.position);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (other.hasPositionBuilder()) {
                this.positionBuilder = trafficflow.ctm.tf_devs.datasource.Position.newBuilder(other.getPositionBuilder());
            }
            if (isValidValue(fields()[4], other.symbol)) {
                this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
        }

        /**
         * Creates a Builder by copying an existing Location_record instance
         * @param other The existing instance to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Location_record other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.sensorName)) {
                this.sensorName = data().deepCopy(fields()[2].schema(), other.sensorName);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.position)) {
                this.position = data().deepCopy(fields()[3].schema(), other.position);
                fieldSetFlags()[3] = true;
            }
            this.positionBuilder = null;
            if (isValidValue(fields()[4], other.symbol)) {
                this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.CharSequence getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'name' field.
         * @return The value.
         */
        public java.lang.CharSequence getName() {
            return name;
        }


        /**
         * Sets the value of the 'name' field.
         * @param value The value of 'name'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setName(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.name = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set.
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'name' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder clearName() {
            name = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorName' field.
         * @return The value.
         */
        public java.lang.CharSequence getSensorName() {
            return sensorName;
        }


        /**
         * Sets the value of the 'sensorName' field.
         * @param value The value of 'sensorName'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setSensorName(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.sensorName = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorName' field has been set.
         * @return True if the 'sensorName' field has been set, false otherwise.
         */
        public boolean hasSensorName() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'sensorName' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder clearSensorName() {
            sensorName = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'position' field.
         * @return The value.
         */
        public trafficflow.ctm.tf_devs.datasource.Position getPosition() {
            return position;
        }


        /**
         * Sets the value of the 'position' field.
         * @param value The value of 'position'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setPosition(trafficflow.ctm.tf_devs.datasource.Position value) {
            validate(fields()[3], value);
            this.positionBuilder = null;
            this.position = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'position' field has been set.
         * @return True if the 'position' field has been set, false otherwise.
         */
        public boolean hasPosition() {
            return fieldSetFlags()[3];
        }

        /**
         * Gets the Builder instance for the 'position' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Position.Builder getPositionBuilder() {
            if (positionBuilder == null) {
                if (hasPosition()) {
                    setPositionBuilder(trafficflow.ctm.tf_devs.datasource.Position.newBuilder(position));
                } else {
                    setPositionBuilder(trafficflow.ctm.tf_devs.datasource.Position.newBuilder());
                }
            }
            return positionBuilder;
        }

        /**
         * Sets the Builder instance for the 'position' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */

        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setPositionBuilder(trafficflow.ctm.tf_devs.datasource.Position.Builder value) {
            clearPosition();
            positionBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'position' field has an active Builder instance
         * @return True if the 'position' field has an active Builder instance
         */
        public boolean hasPositionBuilder() {
            return positionBuilder != null;
        }

        /**
         * Clears the value of the 'position' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder clearPosition() {
            position = null;
            positionBuilder = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'symbol' field.
         * @return The value.
         */
        public java.lang.CharSequence getSymbol() {
            return symbol;
        }


        /**
         * Sets the value of the 'symbol' field.
         * @param value The value of 'symbol'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder setSymbol(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.symbol = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'symbol' field has been set.
         * @return True if the 'symbol' field has been set, false otherwise.
         */
        public boolean hasSymbol() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'symbol' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Location_record.Builder clearSymbol() {
            symbol = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Location_record build() {
            try {
                Location_record record = new Location_record();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.sensorName = fieldSetFlags()[2] ? this.sensorName : (java.lang.CharSequence) defaultValue(fields()[2]);
                if (positionBuilder != null) {
                    try {
                        record.position = this.positionBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("position"));
                        throw e;
                    }
                } else {
                    record.position = fieldSetFlags()[3] ? this.position : (trafficflow.ctm.tf_devs.datasource.Position) defaultValue(fields()[3]);
                }
                record.symbol = fieldSetFlags()[4] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[4]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Location_record>
            WRITER$ = (org.apache.avro.io.DatumWriter<Location_record>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Location_record>
            READER$ = (org.apache.avro.io.DatumReader<Location_record>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.id);

        out.writeString(this.name);

        out.writeString(this.sensorName);

        this.position.customEncode(out);

        if (this.symbol == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.symbol);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);

            this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);

            this.sensorName = in.readString(this.sensorName instanceof Utf8 ? (Utf8) this.sensorName : null);

            if (this.position == null) {
                this.position = new trafficflow.ctm.tf_devs.datasource.Position();
            }
            this.position.customDecode(in);

            if (in.readIndex() != 1) {
                in.readNull();
                this.symbol = null;
            } else {
                this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8) this.symbol : null);
            }

        } else {
            for (int i = 0; i < 5; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.id = in.readString(this.id instanceof Utf8 ? (Utf8) this.id : null);
                        break;

                    case 1:
                        this.name = in.readString(this.name instanceof Utf8 ? (Utf8) this.name : null);
                        break;

                    case 2:
                        this.sensorName = in.readString(this.sensorName instanceof Utf8 ? (Utf8) this.sensorName : null);
                        break;

                    case 3:
                        if (this.position == null) {
                            this.position = new trafficflow.ctm.tf_devs.datasource.Position();
                        }
                        this.position.customDecode(in);
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.symbol = null;
                        } else {
                            this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8) this.symbol : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










