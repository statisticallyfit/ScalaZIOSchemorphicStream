/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package trafficflow.ctm.tf_devs.datasource;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 4404923010810245393L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"trafficflow.ctm.tf_devs.datasource\",\"fields\":[{\"name\":\"locations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location_record\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sensorName\",\"type\":\"string\"},{\"name\":\"position\",\"type\":{\"type\":\"record\",\"name\":\"Position\",\"fields\":[{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"type\",\"type\":\"string\"}]}},{\"name\":\"symbol\",\"type\":[\"null\",\"string\"]}]}}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Data> ENCODER =
            new BinaryMessageEncoder<Data>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Data> DECODER =
            new BinaryMessageDecoder<Data>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Data> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Data> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Data> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Data>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Data to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Data from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Data instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Data fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> locations;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Data() {
    }

    /**
     * All-args constructor.
     * @param locations The new value for locations
     */
    public Data(java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> locations) {
        this.locations = locations;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return locations;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                locations = (java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record>) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'locations' field.
     * @return The value of the 'locations' field.
     */
    public java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> getLocations() {
        return locations;
    }


    /**
     * Sets the value of the 'locations' field.
     * @param value the value to set.
     */
    public void setLocations(java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> value) {
        this.locations = value;
    }

    /**
     * Creates a new Data RecordBuilder.
     * @return A new Data RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Data.Builder newBuilder() {
        return new trafficflow.ctm.tf_devs.datasource.Data.Builder();
    }

    /**
     * Creates a new Data RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Data RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Data.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Data.Builder other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Data.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Data.Builder(other);
        }
    }

    /**
     * Creates a new Data RecordBuilder by copying an existing Data instance.
     * @param other The existing instance to copy.
     * @return A new Data RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Data.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Data other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Data.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Data.Builder(other);
        }
    }

    /**
     * RecordBuilder for Data instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
            implements org.apache.avro.data.RecordBuilder<Data> {

        private java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> locations;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Data.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.locations)) {
                this.locations = data().deepCopy(fields()[0].schema(), other.locations);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
        }

        /**
         * Creates a Builder by copying an existing Data instance
         * @param other The existing instance to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Data other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.locations)) {
                this.locations = data().deepCopy(fields()[0].schema(), other.locations);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'locations' field.
         * @return The value.
         */
        public java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> getLocations() {
            return locations;
        }


        /**
         * Sets the value of the 'locations' field.
         * @param value The value of 'locations'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Data.Builder setLocations(java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> value) {
            validate(fields()[0], value);
            this.locations = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'locations' field has been set.
         * @return True if the 'locations' field has been set, false otherwise.
         */
        public boolean hasLocations() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'locations' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Data.Builder clearLocations() {
            locations = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Data build() {
            try {
                Data record = new Data();
                record.locations = fieldSetFlags()[0] ? this.locations : (java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record>) defaultValue(fields()[0]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Data>
            WRITER$ = (org.apache.avro.io.DatumWriter<Data>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Data>
            READER$ = (org.apache.avro.io.DatumReader<Data>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        long size0 = this.locations.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (trafficflow.ctm.tf_devs.datasource.Location_record e0 : this.locations) {
            actualSize0++;
            out.startItem();
            e0.customEncode(out);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            long size0 = in.readArrayStart();
            java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> a0 = this.locations;
            if (a0 == null) {
                a0 = new SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record>((int) size0, SCHEMA$.getField("locations").schema());
                this.locations = a0;
            } else a0.clear();
            SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    trafficflow.ctm.tf_devs.datasource.Location_record e0 = (ga0 != null ? ga0.peek() : null);
                    if (e0 == null) {
                        e0 = new trafficflow.ctm.tf_devs.datasource.Location_record();
                    }
                    e0.customDecode(in);
                    a0.add(e0);
                }
            }

        } else {
            for (int i = 0; i < 1; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        long size0 = in.readArrayStart();
                        java.util.List<trafficflow.ctm.tf_devs.datasource.Location_record> a0 = this.locations;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record>((int) size0, SCHEMA$.getField("locations").schema());
                            this.locations = a0;
                        } else a0.clear();
                        SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<trafficflow.ctm.tf_devs.datasource.Location_record>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                trafficflow.ctm.tf_devs.datasource.Location_record e0 = (ga0 != null ? ga0.peek() : null);
                                if (e0 == null) {
                                    e0 = new trafficflow.ctm.tf_devs.datasource.Location_record();
                                }
                                e0.customDecode(in);
                                a0.add(e0);
                            }
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










