/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package trafficflow.ctm.tf_devs.datasource;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Position extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -5245288626247123026L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Position\",\"namespace\":\"trafficflow.ctm.tf_devs.datasource\",\"fields\":[{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"float\"}},{\"name\":\"type\",\"type\":\"string\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Position> ENCODER =
            new BinaryMessageEncoder<Position>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Position> DECODER =
            new BinaryMessageDecoder<Position>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Position> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Position> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Position> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Position>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this Position to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a Position from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Position instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Position fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.util.List<java.lang.Float> coordinates;
    private java.lang.CharSequence type;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Position() {
    }

    /**
     * All-args constructor.
     * @param coordinates The new value for coordinates
     * @param type The new value for type
     */
    public Position(java.util.List<java.lang.Float> coordinates, java.lang.CharSequence type) {
        this.coordinates = coordinates;
        this.type = type;
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return coordinates;
            case 1:
                return type;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                coordinates = (java.util.List<java.lang.Float>) value$;
                break;
            case 1:
                type = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'coordinates' field.
     * @return The value of the 'coordinates' field.
     */
    public java.util.List<java.lang.Float> getCoordinates() {
        return coordinates;
    }


    /**
     * Sets the value of the 'coordinates' field.
     * @param value the value to set.
     */
    public void setCoordinates(java.util.List<java.lang.Float> value) {
        this.coordinates = value;
    }

    /**
     * Gets the value of the 'type' field.
     * @return The value of the 'type' field.
     */
    public java.lang.CharSequence getType() {
        return type;
    }


    /**
     * Sets the value of the 'type' field.
     * @param value the value to set.
     */
    public void setType(java.lang.CharSequence value) {
        this.type = value;
    }

    /**
     * Creates a new Position RecordBuilder.
     * @return A new Position RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Position.Builder newBuilder() {
        return new trafficflow.ctm.tf_devs.datasource.Position.Builder();
    }

    /**
     * Creates a new Position RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Position RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Position.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Position.Builder other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Position.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Position.Builder(other);
        }
    }

    /**
     * Creates a new Position RecordBuilder by copying an existing Position instance.
     * @param other The existing instance to copy.
     * @return A new Position RecordBuilder
     */
    public static trafficflow.ctm.tf_devs.datasource.Position.Builder newBuilder(trafficflow.ctm.tf_devs.datasource.Position other) {
        if (other == null) {
            return new trafficflow.ctm.tf_devs.datasource.Position.Builder();
        } else {
            return new trafficflow.ctm.tf_devs.datasource.Position.Builder(other);
        }
    }

    /**
     * RecordBuilder for Position instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Position>
            implements org.apache.avro.data.RecordBuilder<Position> {

        private java.util.List<java.lang.Float> coordinates;
        private java.lang.CharSequence type;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Position.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.coordinates)) {
                this.coordinates = data().deepCopy(fields()[0].schema(), other.coordinates);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.type)) {
                this.type = data().deepCopy(fields()[1].schema(), other.type);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing Position instance
         * @param other The existing instance to copy.
         */
        private Builder(trafficflow.ctm.tf_devs.datasource.Position other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.coordinates)) {
                this.coordinates = data().deepCopy(fields()[0].schema(), other.coordinates);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.type)) {
                this.type = data().deepCopy(fields()[1].schema(), other.type);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'coordinates' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getCoordinates() {
            return coordinates;
        }


        /**
         * Sets the value of the 'coordinates' field.
         * @param value The value of 'coordinates'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Position.Builder setCoordinates(java.util.List<java.lang.Float> value) {
            validate(fields()[0], value);
            this.coordinates = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'coordinates' field has been set.
         * @return True if the 'coordinates' field has been set, false otherwise.
         */
        public boolean hasCoordinates() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'coordinates' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Position.Builder clearCoordinates() {
            coordinates = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'type' field.
         * @return The value.
         */
        public java.lang.CharSequence getType() {
            return type;
        }


        /**
         * Sets the value of the 'type' field.
         * @param value The value of 'type'.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Position.Builder setType(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.type = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'type' field.
         * @return This builder.
         */
        public trafficflow.ctm.tf_devs.datasource.Position.Builder clearType() {
            type = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Position build() {
            try {
                Position record = new Position();
                record.coordinates = fieldSetFlags()[0] ? this.coordinates : (java.util.List<java.lang.Float>) defaultValue(fields()[0]);
                record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Position>
            WRITER$ = (org.apache.avro.io.DatumWriter<Position>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Position>
            READER$ = (org.apache.avro.io.DatumReader<Position>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        long size0 = this.coordinates.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (java.lang.Float e0 : this.coordinates) {
            actualSize0++;
            out.startItem();
            out.writeFloat(e0);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

        out.writeString(this.type);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Float> a0 = this.coordinates;
            if (a0 == null) {
                a0 = new SpecificData.Array<java.lang.Float>((int) size0, SCHEMA$.getField("coordinates").schema());
                this.coordinates = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a0 : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
                    e0 = in.readFloat();
                    a0.add(e0);
                }
            }

            this.type = in.readString(this.type instanceof Utf8 ? (Utf8) this.type : null);

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        long size0 = in.readArrayStart();
                        java.util.List<java.lang.Float> a0 = this.coordinates;
                        if (a0 == null) {
                            a0 = new SpecificData.Array<java.lang.Float>((int) size0, SCHEMA$.getField("coordinates").schema());
                            this.coordinates = a0;
                        } else a0.clear();
                        SpecificData.Array<java.lang.Float> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a0 : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                java.lang.Float e0 = (ga0 != null ? ga0.peek() : null);
                                e0 = in.readFloat();
                                a0.add(e0);
                            }
                        }
                        break;

                    case 1:
                        this.type = in.readString(this.type instanceof Utf8 ? (Utf8) this.type : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










